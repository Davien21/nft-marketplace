import { useEffect } from "react";
import Head from "next/head";
import { ethers } from "ethers";
import axios from "axios";
import { useState } from "react";
import Web3Modal from "web3modal";
import { nftAddress, nftMarketAddress } from "../.config";
import NFT from "../artifacts/contracts/NFT.sol/NFT.json";
import Market from "../artifacts/contracts/Market.sol/NFTMarket.json";
import crypto from "crypto";

function CreatorDashboard(props) {
  const [nfts, setNfts] = useState([]);
  const [sold, setSold] = useState([]);
  const [loadingState, setLoadingState] = useState(true);

  async function loadNFTs() {
    const web3Modal = new Web3Modal();
    const connection = await web3Modal.connect();
    const provider = new ethers.providers.Web3Provider(connection);
    const signer = provider.getSigner();

    const tokenContract = new ethers.Contract(nftAddress, NFT.abi, provider);
    const marketContract = new ethers.Contract(
      nftMarketAddress,
      Market.abi,
      signer
    );

    let items = await marketContract.fetchMarketItems();
    items = await Promise.all(
      items.map(async (item) => {
        const tokenUri = await tokenContract.tokenURI(item.tokenId);
        const meta = await axios.get(tokenUri);
        const price = ethers.utils.formatUnits(item.price.toString(), "ether");
        return (item = {
          price,
          tokenId: item.tokenId.toNumber(),
          seller: item.seller,
          owner: item.owner,
          image: meta.data.image,
          name: meta.data.name,
          description: meta.data.description,
        });
      })
    );

    const solditems = items.filter((item) => item.sold);

    setNfts(items);
    setSold(solditems);
    setLoadingState(false);
  }

  useEffect(() => {
    (async () => {
      await loadNFTs();
    })();
  }, []);

  if (!loadingState && !nfts.length) {
    return (
      <h1 className="px-20 py-10 text-3xl">
        There are no items in the marketplace.
      </h1>
    );
  }

  return (
    <>
      <Head>
        <title>NFT Market</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        <div className="flex justify-center container">
          <div className="px-4">
            <h2 className="text-2xl py-2">Items created</h2>
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4">
              {nfts.map((nft) => (
                <div
                  key={crypto.randomBytes(4).toString("hex")}
                  className="border shadow rounded-xl overflow-hidden"
                >
                  {/* eslint-disable-next-line @next/next/no-img-element */}
                  <img
                    style={{ height: "350px", objectFit: "cover" }}
                    src={nft.image}
                    alt={nft.name}
                  />
                  <div className="p-4">
                    <p className="h-16 text-2xl font-semibold">{nft.name}</p>
                    <div style={{ height: "70px" }} className="overflow-hidden">
                      <p className="text-gray-400">{nft.description}</p>
                    </div>
                    <div className="p-4 bg-black">
                      <p className="text-2xl mb-4 font-bold text-white">
                        {nft.price} Matic
                      </p>
                      <button
                        className="w-full bg-pink-500 text-white font-bold py-2 px-12 rounded"
                        onClick={() => buyNFT(nft)}
                      >
                        Buy
                      </button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
        {Boolean(sold.length) && (
          <div className="flex justify-center container">
            <div className="px-4">
              <h2 className="text-2xl py-2">Items Sold</h2>
              <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4">
                {sold.map((nft) => (
                  <div
                    key={crypto.randomBytes(4).toString("hex")}
                    className="border shadow rounded-xl overflow-hidden"
                  >
                    {/* eslint-disable-next-line @next/next/no-img-element */}
                    <img
                      style={{ height: "350px", objectFit: "cover" }}
                      src={nft.image}
                      alt={nft.name}
                    />
                    <div className="p-4">
                      <p className="h-16 text-2xl font-semibold">{nft.name}</p>
                      <div
                        style={{ height: "70px" }}
                        className="overflow-hidden"
                      >
                        <p className="text-gray-400">{nft.description}</p>
                      </div>
                      <div className="p-4 bg-black">
                        <p className="text-2xl mb-4 font-bold text-white">
                          {nft.price} Matic
                        </p>
                        <button
                          className="w-full bg-pink-500 text-white font-bold py-2 px-12 rounded"
                          onClick={() => buyNFT(nft)}
                        >
                          Buy
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}
      </main>
    </>
  );
}

export default CreatorDashboard;
